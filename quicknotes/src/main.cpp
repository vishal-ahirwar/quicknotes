// Auto generated by flick CLI
#include <wx/activityindicator.h>
#include <wx/listctrl.h>
#include <wx/wx.h>

#include <cassert>
#include <pqxx/pqxx>
#include <thread>

#include "LoginDialog.h"

class MyFrame : public wxFrame
{
   public:
    MyFrame()
        : wxFrame(nullptr, wxID_ANY, "PostgreSQL CRUD App", wxDefaultPosition, wxSize(700, 500))
    {
        assert(conn_str.length() > 0 && "Connetion string is not set");
        wxPanel*    panel     = new wxPanel(this);
        wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);

        activity = new wxActivityIndicator(panel);
        activity->Hide();

        listCtrl = new wxListCtrl(panel, wxID_ANY, wxDefaultPosition, wxDefaultSize,
                                  wxLC_REPORT | wxLC_SINGLE_SEL);
        listCtrl->InsertColumn(0, "ID", wxLIST_FORMAT_LEFT, 50);
        listCtrl->InsertColumn(1, "Name", wxLIST_FORMAT_LEFT, 200);
        listCtrl->InsertColumn(2, "Email", wxLIST_FORMAT_LEFT, 300);

        wxBoxSizer* btnSizer = new wxBoxSizer(wxHORIZONTAL);
        addBtn               = new wxButton(panel, wxID_ANY, "Add");
        editBtn              = new wxButton(panel, wxID_ANY, "Edit");
        deleteBtn            = new wxButton(panel, wxID_ANY, "Delete");

        btnSizer->Add(addBtn, 0, wxRIGHT, 10);
        btnSizer->Add(editBtn, 0, wxRIGHT, 10);
        btnSizer->Add(deleteBtn, 0, wxRIGHT, 10);

        mainSizer->Add(activity, 0, wxALIGN_CENTER | wxTOP, 10);
        mainSizer->Add(listCtrl, 1, wxEXPAND | wxALL, 10);
        mainSizer->Add(btnSizer, 0, wxALIGN_CENTER | wxBOTTOM, 10);
        panel->SetSizer(mainSizer);

        LoadUsers();

        addBtn->Bind(wxEVT_BUTTON, &MyFrame::OnAdd, this);
        editBtn->Bind(wxEVT_BUTTON, &MyFrame::OnEdit, this);
        deleteBtn->Bind(wxEVT_BUTTON, &MyFrame::OnDelete, this);
    }

   private:
    wxListCtrl*          listCtrl;
    wxActivityIndicator* activity;
    wxButton *           addBtn, *editBtn, *deleteBtn;

    std::string conn_str{};
    void        LoadUsers()
    {
        activity->Show();
        activity->Start();
        std::thread(
            [this]
            {
                try
                {
                    pqxx::connection conn(conn_str);
                    pqxx::work       txn(conn);
                    auto res = txn.exec("SELECT id, name, email FROM users ORDER BY id");
                    txn.commit();

                    CallAfter(
                        [=]
                        {
                            listCtrl->DeleteAllItems();
                            int i = 0;
                            for (const auto& row : res)
                            {
                                listCtrl->InsertItem(i, row[0].c_str());
                                listCtrl->SetItem(i, 1, row[1].c_str());
                                listCtrl->SetItem(i, 2, row[2].c_str());
                                ++i;
                            }
                            activity->Stop();
                            activity->Hide();
                        });
                }
                catch (const std::exception& e)
                {
                    CallAfter(
                        [=]
                        {
                            activity->Stop();
                            activity->Hide();
                            wxMessageBox(e.what(), "Load Error", wxOK | wxICON_ERROR);
                        });
                }
            })
            .detach();
    }

    void OnAdd(wxCommandEvent&)
    {
        wxTextEntryDialog nameDlg(this, "Enter name:", "Add User");
        if (nameDlg.ShowModal() != wxID_OK)
            return;
        wxString name = nameDlg.GetValue();

        wxTextEntryDialog emailDlg(this, "Enter email:", "Add User");
        if (emailDlg.ShowModal() != wxID_OK)
            return;
        wxString email = emailDlg.GetValue();

        std::thread(
            [=]
            {
                try
                {
                    pqxx::connection conn(conn_str);
                    pqxx::work       txn(conn);
                    txn.exec0("INSERT INTO users (name, email) VALUES (" +
                              txn.quote(name.ToStdString()) + "," + txn.quote(email.ToStdString()) +
                              ")");
                    txn.commit();

                    CallAfter(
                        [=]
                        {
                            wxMessageBox("User added", "Success");
                            LoadUsers();
                        });
                }
                catch (const std::exception& e)
                {
                    CallAfter([=] { wxMessageBox(e.what(), "Add Error", wxOK | wxICON_ERROR); });
                }
            })
            .detach();
    }

    void OnEdit(wxCommandEvent&)
    {
        long selected = listCtrl->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
        if (selected == -1)
            return;

        wxString id    = listCtrl->GetItemText(selected);
        wxString name  = listCtrl->GetItemText(selected, 1);
        wxString email = listCtrl->GetItemText(selected, 2);

        wxTextEntryDialog nameDlg(this, "Edit name:", "Edit User", name);
        if (nameDlg.ShowModal() != wxID_OK)
            return;
        name = nameDlg.GetValue();

        wxTextEntryDialog emailDlg(this, "Edit email:", "Edit User", email);
        if (emailDlg.ShowModal() != wxID_OK)
            return;
        email = emailDlg.GetValue();

        std::thread(
            [=]
            {
                try
                {
                    pqxx::connection conn(conn_str);
                    pqxx::work       txn(conn);
                    txn.exec0("UPDATE users SET name = " + txn.quote(name.ToStdString()) +
                              ", email = " + txn.quote(email.ToStdString()) +
                              " WHERE id = " + txn.quote(id.ToStdString()));
                    txn.commit();

                    CallAfter(
                        [=]
                        {
                            wxMessageBox("User updated", "Success");
                            LoadUsers();
                        });
                }
                catch (const std::exception& e)
                {
                    CallAfter([=] { wxMessageBox(e.what(), "Update Error", wxOK | wxICON_ERROR); });
                }
            })
            .detach();
    }

    void OnDelete(wxCommandEvent&)
    {
        long selected = listCtrl->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
        if (selected == -1)
            return;

        wxString id = listCtrl->GetItemText(selected);
        if (wxMessageBox("Delete user?", "Confirm", wxYES_NO | wxICON_WARNING) != wxYES)
            return;

        std::thread(
            [=]
            {
                try
                {
                    pqxx::connection conn(conn_str);
                    pqxx::work       txn(conn);
                    txn.exec0("DELETE FROM users WHERE id = " + txn.quote(id.ToStdString()));
                    txn.commit();

                    CallAfter(
                        [=]
                        {
                            wxMessageBox("User deleted", "Success");
                            LoadUsers();
                        });
                }
                catch (const std::exception& e)
                {
                    CallAfter([=] { wxMessageBox(e.what(), "Delete Error", wxOK | wxICON_ERROR); });
                }
            })
            .detach();
    }
};

class MyApp : public wxApp
{
    std::string connectionString{};

   public:
    MyApp() { assert(connectionString.length() > 0 && "Connetion string is not set"); }
    bool OnInit() override
    {
        LoginDialog login(nullptr);
        if (login.ShowModal() == wxID_OK)
        {
            wxString uname = login.GetUsername();
            wxString pwd   = login.GetPassword();

            try
            {
                pqxx::connection conn(connectionString);
                pqxx::work       txn{conn};
                auto             res =
                    txn.exec_params("SELECT * FROM app_users WHERE username=$1 AND password=$2",
                                    uname.ToStdString(), pwd.ToStdString());

                if (res.empty())
                {
                    wxMessageBox("Invalid credentials", "Login failed", wxOK | wxICON_ERROR);
                    return false;
                }
            }
            catch (const std::exception& e)
            {
                wxMessageBox(e.what(), "Database Error", wxOK | wxICON_ERROR);
                return false;
            }

            MyFrame* frame = new MyFrame();
            frame->Show();
            return true;
        }
        return false;
    }
};

wxIMPLEMENT_APP(MyApp);
